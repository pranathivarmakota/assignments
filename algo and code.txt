Algorithm to Check if a Given Number is Prime

Algorithm to Generate Fibonacci Series Until the Number 1000

Write an algorithm to accept a number and return the reverse of the same. If the number ends with one or more zeros, then in the reversed number those zeros will not be present (since those zeros become leading zeros).

Find the maximum element in an array: Given an array of integers, write a function to find the maximum element in the array.

Find the first occurrence of an element in an array: Given an array of integers and an element, write a function to find the first occurrence of the element in the array. 


Write an algorithm to check if a given number is even or odd.

 Algorithm

1. Input: A number n.
2. Process:
   - If the number n is divisible by 2 (i.e., n % 2 == 0), then the number is even.
   - Otherwise, the number is odd.
3. Output: "Even" if the number is even, "Odd" if the number is odd.

Pseudocode

    Input: n (an integer)
    Output: "Even" if n is even, "Odd" if n is odd

    Begin
        if (n % 2 == 0) then
            print "Even"
        else
            print "Odd"
        end if
    End



Algorithm to Check if a Given Number is Prime


Alogirthm:
1. Input: A number n ,i.
2. Process:
   -if n=1 or n<1 number is not prime.
   -if n=2 then number is prime number. 
    -for each i starting from 2 to n.
   - If the number n is divisible by i (i.e., n % i == 0), then the number is composite.
   - Otherwise, the number is prime.
3. Output: "Prime" if the number is Prime, "Not Prime" if the number is Not Prime.

Pseudocode:
 Input: n (an integer), i=0
    Output: "Prime" if the number is Prime, "Not Prime" if the number is Not Prime.

    Begin
      for i=2 to n
        if (n % i == 0) then
            print " Not Prime"
        else
            print "Prime"
        end if
    End

code:
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number:");
        int n = sc.nextInt();
        int t=0;
        if(n==1){
            System.out.println("Either prime nor composite numbers");
        }
        for(int i=2;i<=n/2;i++){
            if(n%i==0)
             t=1;
        }
        if(n!=1){
        if(t==1){
            System.out.println("Not a Prime number");
           }
         else{
           System.out.println("Prime number");}}
    }
}


2.....Algorithm to Generate Fibonacci Series Until the Number 1000
Algorithm:
-Integer: n(number)
Process:
-Initialize two variables n1 and n2 with 0 and 1 respectively.
-Print n1 and n2.
-While the next number (a + b) is less than or equal to 1000:
-Calculate the next number.
-Print the next number.
-Update a and b to the last two numbers
 
pseudocode:
Begin
    n1 = 0 n2 = 1
    print n1
    print n2
    while (n2 + n1 <= 1000) do
        n3= n1 + n2
        print n3
        n1 = n2
        n2= n3
    end while

End

code:
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		int n=sc.nextInt();
		int n1=0,n2=1,n3;
		System.out.print(n1+n2);
		for(int i=0;i<n-2;i++){
		    n3=n1+n2;
		    System.out.print(n3);
		    n1=n2;
		    n2=n3;
		}
	}
}

3....Write an algorithm to accept a number and return the reverse of the same. If the number ends with one or more zeros, then in the reversed number those zeros will not be present (since those zeros become leading zeros).
Algorithm:
Input: A number n.
Process:
-Initialize a variable reversed to 0.
-While n is greater than 0:
-Extract the last digit of n using n % 10.
-Append this digit to reversed.
-Remove the last digit from n using integer division by 10.
-Continue until n is 0.
-Output: 
The reversed number.

pseudocode:
Input: n (an integer)
Begin

    reversed = 0
    while (n > 0) do
        digit = n % 10
        reversed = reversed * 10 + digit
        n = n // 10
    end while
    print reversed

End
Output: Reversed number

code:
public class ReverseNumber {
    public static void main(String[] args) {
        int n = 56789; 
        int reverse= reverseNumber(n);
        System.out.println(reversed);
    }
 
    public static int reverseNumber(int n) {

        int reverse = 0;
        while (n > 0) {
            int digit = n % 10;
            reverse = reverse * 10 + digit;
            n = n / 10;
        }
        return reverse;

    }

}
 

4...Find the maximum element in an array: Given an array of integers, write a function to find the maximum element in the array.

Algorithm:
Input: An array arr of integers.
Process:
-Initialize max to the first element of the array.
-For each element in the array, if it is greater than max, update max.
output:
The maximum element in the array.
 
Pseudocode:
Input: arr (an array of integers)

Output: Maximum element in arr
 
Begin
    if length of arr is 0 then
        print "Array is empty"
        return
    end if
    max = arr[0]
    for i from 1 to length of arr - 1 do
        if (arr[i] > max) then
            max = arr[i]
        end if
    end for
    print max

End
 
 
Java Code
 
public class MaxElementInArray {

    public static void main(String[] args) {

        int[] arr = {3, 5, 7, 2, 8, 6}; // Example array

        int max = findMax(arr);

        System.out.println(max);

    }
 
    public static int findMax(int[] arr) {

        if (arr.length == 0) {

            throw new IllegalArgumentException("Array is empty");

        }

        int max = arr[0];

        for (int i = 1; i < arr.length; i++) {

            if (arr[i] > max) {

                max = arr[i];

            }

        }

        return max;

    }

}

5....Find the first occurrence of an element in an array: Given an array of integers and an element, write a function to find the first occurrence of the element in the array. 

 
Algorithm
 
1.Input: An array arr of integers and an integer target.

2.Process:

-For each index i in the array, check if arr[i] is equal to target.

-If a match is found, return the index i.

-If the loop completes without finding target, return -1.

3.Output: The index of the first occurrence of target, or -1 if target is not found.
 
Pseudocode
 
Input: arr (an array of integers), target (an integer)

Output: Index of first occurrence of target in arr, or -1 if not found
 
Begin

    for i from 0 to length of arr - 1 do

        if (arr[i] == target) then

            print i

            return

        end if

    end for

    print -1

End
 
Java Code
 
public class FirstOccurrence {

    public static void main(String[] args) {

        int[] arr = {3, 5, 7, 2, 8, 5}; 

        int target = 5;

        int index = findFirstOccurrence(arr, target);

        System.out.println(index);

    }
 
    public static int findFirstOccurrence(int[] arr, int target) {

        for (int i = 0; i < arr.length; i++) {

            if (arr[i] == target) {

                return i;

            }

        }

        return -1;

    }

}
 

